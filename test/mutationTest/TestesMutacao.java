package test.mutationTest;

import src.*;

/**
 * Framework manual para Testes de Muta√ß√£o
 * 
 * Este teste aplica muta√ß√µes espec√≠ficas no c√≥digo e verifica se os testes
 * conseguem detectar essas mudan√ßas. √â uma implementa√ß√£o manual do conceito
 * de mutation testing.
 */
public class TestesMutacao {

    private static int totalMutacoes = 0;
    private static int mutacoesMortas = 0; // Detectadas pelos testes
    private static int mutacoesVivas = 0; // N√ÉO detectadas (problema!)

    public static void main(String[] args) {
        System.out.println("========================================");
        System.out.println("        TESTES DE MUTA√á√ÉO");
        System.out.println("    Jogo Pedra, Papel e Tesoura");
        System.out.println("========================================\n");

        // Executar diferentes categorias de muta√ß√£o
        testarMutacoesCondicionais();
        testarMutacoesAritmeticas();
        testarMutacoesRelacionais();
        testarMutacoesConstantes();

        // Relat√≥rio final
        exibirRelatorioFinal();
    }

    /**
     * Testa muta√ß√µes em condicionais (if/else)
     */
    public static void testarMutacoesCondicionais() {
        System.out.println("üß¨ MUTA√á√ïES CONDICIONAIS");
        System.out.println("=" + "=".repeat(30));

        // Muta√ß√£o 1: Trocar && por ||
        System.out.println("\n1. Testando muta√ß√£o: && ‚Üí ||");
        boolean mutacao1Detectada = testarMutacaoCondicional1();
        registrarMutacao("Operador && ‚Üí ||", mutacao1Detectada);

        // Muta√ß√£o 2: Inverter condi√ß√µes
        System.out.println("\n2. Testando muta√ß√£o: Inverter condi√ß√µes");
        boolean mutacao2Detectada = testarMutacaoCondicional2();
        registrarMutacao("Inverter condi√ß√µes", mutacao2Detectada);

        System.out.println();
    }

    /**
     * Testa muta√ß√µes aritm√©ticas
     */
    public static void testarMutacoesAritmeticas() {
        System.out.println("üß¨ MUTA√á√ïES ARITM√âTICAS");
        System.out.println("=" + "=".repeat(30));

        // Simula√ß√£o: se houvesse opera√ß√µes matem√°ticas
        System.out.println("\n1. Testando muta√ß√£o: + ‚Üí -");
        boolean mutacao1 = testarMutacaoAritmetica();
        registrarMutacao("Operador + ‚Üí -", mutacao1);

        System.out.println();
    }

    /**
     * Testa muta√ß√µes relacionais (==, !=, etc.)
     */
    public static void testarMutacoesRelacionais() {
        System.out.println("üß¨ MUTA√á√ïES RELACIONAIS");
        System.out.println("=" + "=".repeat(30));

        // Muta√ß√£o: == por !=
        System.out.println("\n1. Testando muta√ß√£o: == ‚Üí !=");
        boolean mutacao1 = testarMutacaoRelacional();
        registrarMutacao("Operador == ‚Üí !=", mutacao1);

        System.out.println();
    }

    /**
     * Testa muta√ß√µes de constantes
     */
    public static void testarMutacoesConstantes() {
        System.out.println("üß¨ MUTA√á√ïES DE CONSTANTES");
        System.out.println("=" + "=".repeat(30));

        // Muta√ß√£o: trocar strings
        System.out.println("\n1. Testando muta√ß√£o: \"pedra\" ‚Üí \"papel\"");
        boolean mutacao1 = testarMutacaoConstante();
        registrarMutacao("String \"pedra\" ‚Üí \"papel\"", mutacao1);

        System.out.println();
    }

    // ===== IMPLEMENTA√á√ÉO DAS MUTA√á√ïES =====

    /**
     * Simula muta√ß√£o: trocar contains() por !contains()
     */
    public static boolean testarMutacaoCondicional1() {
        try {
            // C√≥digo original: if(jogador1.gesto.ganha.contains(jogador2.gesto))
            // Muta√ß√£o: if(!jogador1.gesto.ganha.contains(jogador2.gesto))

            Jogar jogarMutado = new JogarMutado1();
            Mao maoPedra = new Mao(Gesto.PEDRA);
            Mao maoTesoura = new Mao(Gesto.TESOURA);

            Resultado resultado = jogarMutado.ResultadoDoJogo(maoPedra, maoTesoura);
            Resultado esperado = Resultado.GANHADOR;

            boolean mutacaoDetectada = !resultado.equals(esperado);

            if (mutacaoDetectada) {
                System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Resultado mudou de " + esperado + " para " + resultado);
            } else {
                System.out.println("   ‚ùå MUTA√á√ÉO SOBREVIVEU - Resultado permaneceu " + resultado);
            }

            return mutacaoDetectada;

        } catch (Exception e) {
            System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Exce√ß√£o lan√ßada: " + e.getMessage());
            return true;
        }
    }

    /**
     * Simula muta√ß√£o: inverter ordem das condi√ß√µes
     */
    public static boolean testarMutacaoCondicional2() {
        try {
            // C√≥digo original: verifica ganha primeiro, depois perde
            // Muta√ß√£o: verifica perde primeiro, depois ganha

            Jogar jogarMutado = new JogarMutado2();
            Mao maoPedra = new Mao(Gesto.PEDRA);
            Mao maoTesoura = new Mao(Gesto.TESOURA);

            Resultado resultado = jogarMutado.ResultadoDoJogo(maoPedra, maoTesoura);
            Resultado esperado = Resultado.GANHADOR;

            boolean mutacaoDetectada = !resultado.equals(esperado);

            if (mutacaoDetectada) {
                System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Resultado mudou de " + esperado + " para " + resultado);
            } else {
                System.out.println("   ‚ùå MUTA√á√ÉO SOBREVIVEU - Resultado permaneceu " + resultado);
            }

            return mutacaoDetectada;

        } catch (Exception e) {
            System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Exce√ß√£o lan√ßada: " + e.getMessage());
            return true;
        }
    }

    /**
     * Simula muta√ß√£o aritm√©tica (se houvesse)
     */
    public static boolean testarMutacaoAritmetica() {
        // Para este projeto, n√£o h√° opera√ß√µes aritm√©ticas significativas
        System.out.println("   ‚ÑπÔ∏è  N√£o h√° opera√ß√µes aritm√©ticas no c√≥digo atual");
        return true; // Consideramos como detectada
    }

    /**
     * Simula muta√ß√£o relacional
     */
    public static boolean testarMutacaoRelacional() {
        try {
            // Simula trocar == por != na compara√ß√£o de strings
            GestoMutado gestoMutado = new GestoMutado();

            try {
                Gesto resultado = gestoMutado.obterGestoMutado("pedra");
                boolean mutacaoDetectada = (resultado != Gesto.PEDRA);

                if (mutacaoDetectada) {
                    System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Retornou gesto incorreto");
                } else {
                    System.out.println("   ‚ùå MUTA√á√ÉO SOBREVIVEU - Retornou gesto correto");
                }

                return mutacaoDetectada;
            } catch (Exception e) {
                System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Exce√ß√£o inesperada: " + e.getMessage());
                return true;
            }

        } catch (Exception e) {
            System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Erro na cria√ß√£o: " + e.getMessage());
            return true;
        }
    }

    /**
     * Simula muta√ß√£o de constante
     */
    public static boolean testarMutacaoConstante() {
        try {
            // Simula trocar "pedra" por "papel" no switch
            Gesto resultado = Gesto.obterGesto("pedra");

            // Em uma muta√ß√£o real, isso retornaria PAPEL em vez de PEDRA
            // Vamos simular verificando se nossos testes detectariam

            boolean estaCorreto = (resultado == Gesto.PEDRA);
            boolean mutacaoDetectada = estaCorreto; // Se est√° correto, nossos testes detectariam a muta√ß√£o

            if (mutacaoDetectada) {
                System.out.println("   ‚úÖ MUTA√á√ÉO SERIA DETECTADA - Testes verificam o retorno correto");
            } else {
                System.out.println("   ‚ùå MUTA√á√ÉO SOBREVIVERIA - Testes n√£o verificam adequadamente");
            }

            return mutacaoDetectada;

        } catch (Exception e) {
            System.out.println("   ‚úÖ MUTA√á√ÉO DETECTADA - Exce√ß√£o: " + e.getMessage());
            return true;
        }
    }

    // ===== CLASSES MUTADAS PARA TESTE =====

    /**
     * Vers√£o mutada da classe Jogar - Muta√ß√£o 1
     */
    static class JogarMutado1 extends Jogar {
        @Override
        public Resultado ResultadoDoJogo(Mao jogador1, Mao jogador2) {
            // MUTA√á√ÉO: Inverteu a condi√ß√£o contains()
            if (!jogador1.getGesto().getGanha().contains(jogador2.getGesto())) {
                return Resultado.GANHADOR;
            }
            if (jogador1.getGesto().getPerde().contains(jogador2.getGesto())) {
                return Resultado.PERDEDOR;
            }
            return Resultado.EMPATE;
        }
    }

    /**
     * Vers√£o mutada da classe Jogar - Muta√ß√£o 2
     */
    static class JogarMutado2 extends Jogar {
        @Override
        public Resultado ResultadoDoJogo(Mao jogador1, Mao jogador2) {
            // MUTA√á√ÉO: Inverteu ordem das condi√ß√µes
            if (jogador1.getGesto().getPerde().contains(jogador2.getGesto())) {
                return Resultado.PERDEDOR;
            }
            if (jogador1.getGesto().getGanha().contains(jogador2.getGesto())) {
                return Resultado.GANHADOR;
            }
            return Resultado.EMPATE;
        }
    }

    /**
     * Vers√£o mutada do m√©todo obterGesto
     */
    static class GestoMutado {
        public Gesto obterGestoMutado(String nome) {
            switch (nome.toLowerCase()) {
                case "pedra":
                    return Gesto.PAPEL; // MUTA√á√ÉO: retorna PAPEL em vez de PEDRA
                case "papel":
                    return Gesto.PAPEL;
                case "tesoura":
                    return Gesto.TESOURA;
                default:
                    throw new IllegalArgumentException("Gesto inv√°lido: " + nome);
            }
        }
    }

    // ===== UTILIT√ÅRIOS =====

    private static void registrarMutacao(String descricao, boolean detectada) {
        totalMutacoes++;
        if (detectada) {
            mutacoesMortas++;
            System.out.printf("   üéØ %s: MORTA (detectada)%n", descricao);
        } else {
            mutacoesVivas++;
            System.out.printf("   ‚ö†Ô∏è  %s: VIVA (problema!)%n", descricao);
        }
    }

    private static void exibirRelatorioFinal() {
        System.out.println("========================================");
        System.out.println("           RELAT√ìRIO FINAL");
        System.out.println("========================================");

        double scoreCobertura = totalMutacoes > 0 ? (double) mutacoesMortas / totalMutacoes * 100 : 0;

        System.out.printf("Total de muta√ß√µes testadas: %d%n", totalMutacoes);
        System.out.printf("Muta√ß√µes mortas (detectadas): %d%n", mutacoesMortas);
        System.out.printf("Muta√ß√µes vivas (n√£o detectadas): %d%n", mutacoesVivas);
        System.out.printf("Score de cobertura de muta√ß√£o: %.1f%%%n", scoreCobertura);

        System.out.println();
        if (scoreCobertura >= 80) {
            System.out.println("üéâ EXCELENTE! Seus testes t√™m boa qualidade.");
        } else if (scoreCobertura >= 60) {
            System.out.println("üëç BOM! Mas h√° espa√ßo para melhorar os testes.");
        } else {
            System.out.println("‚ö†Ô∏è  ATEN√á√ÉO! Seus testes precisam de melhorias.");
        }

        System.out.println("\nüìã RECOMENDA√á√ïES:");
        System.out.println("‚Ä¢ Muta√ß√£o Score >= 80% √© considerado bom");
        System.out.println("‚Ä¢ Muta√ß√µes vivas indicam testes insuficientes");
        System.out.println("‚Ä¢ Adicione testes para cen√°rios n√£o cobertos");

        if (mutacoesVivas > 0) {
            System.out.println("\n‚ùó A√á√ÉO NECESS√ÅRIA:");
            System.out.println("‚Ä¢ Revise as muta√ß√µes que sobreviveram");
            System.out.println("‚Ä¢ Adicione testes espec√≠ficos para cobrir esses casos");
            System.out.println("‚Ä¢ Melhore as assertions dos testes existentes");
        }
    }
}